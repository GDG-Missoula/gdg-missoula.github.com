{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/dist/boomerang.js","boomerang.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","angular","controller","$rootScope","Config","NavService","mc","this","chapterName","name","googlePlusLink","id","gdgLink","twitterLink","twitter","facebookLink","facebook","meetupLink","meetup","canonical","domain","registerNavListener","tab","navTab","config","$routeProvider","$locationProvider","$mdThemingProvider","hashPrefix","when","templateUrl","controllerAs","otherwise","redirectTo","theme","primaryPalette","accentPalette","default","factory","googleApi","pwaId","dateFormat","cover","title","subtitle","button","text","url","activities","techTalks","codeLabs","hackathons","devFests","appClinics","panels","designSprints","roundTables","setNavTab","tabValue","navListener","getNavTab","listenerToRegister","$http","$sce","vm","loading","jsonp","success","data","desc","aboutMe","trustAsHtml","coverPhoto","status","error","activityList","description","color","icon","push","$log","$filter","events","past","future","headers","Accept","timeout","items","about","replace","response","upcomingError","debug","getPastEventsPage","page","pages","pastError","filter","hashLinky","startNode","currentNode","childNodes","nodeType","ELEMENT_NODE","TEXT_NODE","hashtagRegex","textContent","linkifiedDOM","innerHTML","insertBefore","removeChild","document","createElement","inputDOM","input","linkify","$timeout","handleError","item","actor","object","itemTitle","html","published","actorImage","entry","entries","content","Date","RegExp","join","image","substr","via","body","date","updated","reshares","resharers","totalItems","plusones","plusoners","comments","replies","news","gapi","plusone","go","photos","pwa","photoList","feed","photo","link","href","src","alt","$t","summary","errorMsg","organizers","directive","scope","article","attachment","transclude","element","videoUrl","trustAsResourceUrl","embed","getDynamicHeight","prop","restrict","gplusId","$watch","oldVal","newVal","person"],"mappings":"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","file":"boomerang.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","angular.module('gdgXBoomerang', ['ngRoute', 'ngSanitize', 'ngAria', 'ngAnimate', 'ngMaterial'])\r\n.controller('MainController', function ($rootScope, Config, NavService) {\r\n    var mc = this;\r\n    mc.chapterName = Config.name;\r\n    mc.googlePlusLink = 'https://plus.google.com/' + Config.id;\r\n    mc.gdgLink = 'https://developers.google.com/groups/chapter/' + Config.id + '/';\r\n    mc.twitterLink = Config.twitter ? 'https://twitter.com/' + Config.twitter : null;\r\n    mc.facebookLink = Config.facebook ? 'https://www.facebook.com/' + Config.facebook : null;\r\n    mc.meetupLink = Config.meetup ? 'http://www.meetup.com/' + Config.meetup : null;\r\n    $rootScope.canonical = Config.domain;\r\n\r\n    NavService.registerNavListener(function (tab) {\r\n        mc.navTab = tab;\r\n    });\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.config(function ($routeProvider, $locationProvider, $mdThemingProvider) {\r\n\r\n    $locationProvider.hashPrefix('!');\r\n\r\n    $routeProvider.\r\n        when('/about', {templateUrl: 'app/about/about.html', controller: 'AboutController', controllerAs: 'vm'}).\r\n        when('/news', {templateUrl: 'app/news/news.html', controller: 'NewsController', controllerAs: 'vm'}).\r\n        when('/events', {templateUrl: 'app/events/events.html', controller: 'EventsController', controllerAs: 'vm'}).\r\n        when('/photos', {templateUrl: 'app/photos/photos.html', controller: 'PhotosController', controllerAs: 'vm'}).\r\n        when('/activities', {templateUrl: 'app/activities/activities.html',\r\n            controller: 'ActivitiesController', controllerAs: 'vm'}).\r\n        when('/organizers', {templateUrl: 'app/organizers/organizers.html',\r\n            controller: 'OrganizersController', controllerAs: 'vm'}).\r\n        otherwise({ redirectTo: '/about' });\r\n\r\n    $mdThemingProvider.theme('default')\r\n        .primaryPalette('blue')\r\n        .accentPalette('green', {\r\n            'default': 'A700'\r\n        });\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.factory('Config', function () {\r\n    return {\r\n        // TODO Modify these to configure your app\r\n        'name'          : 'GDG Missoula',\r\n        'id'            : '111439872924209508980',\r\n        'googleApi'     : 'AIzaSyAvtGTIX0uWwObbrvcWvm1tgr6Fl-f7WaM',\r\n        'pwaId'         : '6153662499822550481', // Picasa Web Album id, must belong to Google+ id above\r\n        'domain'        : 'http://gdg-missoula.github.io',\r\n        'twitter'       : '',\r\n        'facebook'      : '',\r\n        'meetup'        : 'Montana-Programmers',\r\n        // Change to 'EEEE, MMMM d, y - H:mm' for 24 hour time format.\r\n        'dateFormat'    : 'EEEE, MMMM d, y - h:mm a',\r\n        'cover' : {\r\n            title: 'Worldwide GDG Events',\r\n            subtitle: 'Directory of developer events organized by tags and displayed on a global map.',\r\n            button: {\r\n                text: 'Find local events',\r\n                url: 'http://gdg.events/'\r\n            }\r\n        },\r\n        'activities': {\r\n            techTalks: true,\r\n            codeLabs: true,\r\n            hackathons: false,\r\n            devFests: true,\r\n            appClinics: false,\r\n            panels: false,\r\n            designSprints: false,\r\n            roundTables: false\r\n        }\r\n        // To update the snippet which is used for sharing, see the TODO in the index.html.\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.factory('NavService', function () {\r\n    var navTab = '0';\r\n    var navListener;\r\n\r\n    return {\r\n        setNavTab: setNavTab,\r\n        getNavTab: getNavTab,\r\n        registerNavListener: registerNavListener\r\n    };\r\n\r\n    function setNavTab(tabValue) {\r\n        navTab = tabValue;\r\n        if (navListener) {\r\n            navListener(navTab);\r\n        }\r\n    }\r\n\r\n    function getNavTab() {\r\n        return navTab;\r\n    }\r\n\r\n    function registerNavListener(listenerToRegister) {\r\n        navListener = listenerToRegister;\r\n    }\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.controller('AboutController', function ($http, $sce, Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = true;\r\n    NavService.setNavTab(0);\r\n    vm.cover = Config.cover;\r\n\r\n    $http.jsonp('https://www.googleapis.com/plus/v1/people/' + Config.id +\r\n            '?callback=JSON_CALLBACK&fields=aboutMe%2Ccover%2Cimage%2CplusOneCount&key=' + Config.googleApi).\r\n        success(function (data) {\r\n            vm.desc = data.aboutMe;\r\n            $sce.trustAsHtml(vm.desc);\r\n\r\n            if (data.cover && data.cover.coverPhoto.url) {\r\n                vm.cover.url = data.cover.coverPhoto.url;\r\n            }\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        })\r\n        .error(function (error) {\r\n            vm.desc = 'Sorry, we failed to retrieve the About text from the Google+ API.';\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        });\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.controller('ActivitiesController', function (Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = false;\r\n    NavService.setNavTab(3);\r\n    vm.activities = [];\r\n\r\n    var activityList = {\r\n        techTalks: {\r\n            name: 'Tech Talks',\r\n            description: 'These talks are a grassroots-style series of presentation given by various ' +\r\n                'technical experts spanning a wide spectrum of topics in technology and related areas.',\r\n            color: 'purple',\r\n            icon: '/app/images/icons/ic_mic_48px.svg'\r\n        },\r\n        roundTables: {\r\n            name: 'Round Tables',\r\n            description: 'Free-form, community-focused events where all attendees can raise topics for discussion.',\r\n            color: 'darkBlue',\r\n            icon: '/app/images/icons/ic_local_pizza_48px.svg'\r\n        },\r\n        codeLabs: {\r\n            name: 'Code Labs',\r\n            description: 'Specially prepared to provide step-by-step instructions, these events focus on ' +\r\n                'introducing new technology and maximizing hands-on learning.',\r\n            color: 'green',\r\n            icon: '/app/images/icons/ic_code_48px.svg'\r\n        },\r\n        devFests: {\r\n            name: 'Dev Fests',\r\n            description: 'GDG Dev Fests are large scale, community-run events that offer speaker sessions ' +\r\n                'across single or multiple product areas, hackathons, code labs, and more...',\r\n            color: 'deepBlue',\r\n            icon: '/app/images/icons/ic_event_48px.svg'\r\n        },\r\n        appClinics: {\r\n            name: 'App Clinics',\r\n            description: 'These community events bring together developers, designers, testers, and ' +\r\n                'usability experts to evaluate specific apps with a focus on constructive criticism, ' +\r\n                'problem solving, and collaboration.',\r\n            color: 'yellow',\r\n            icon: '/app/images/icons/ic_local_hospital_48px.svg'\r\n        },\r\n        panels: {\r\n            name: 'Panels',\r\n            description: 'These events bring together multiple experts on a topic. The formats can vary from ' +\r\n                'moderator-led Q&A, debate, focused or free-form discussion, to audience Q&A.',\r\n            color: 'lightPurple',\r\n            icon: '/app/images/icons/ic_people_48px.svg'\r\n        },\r\n        hackathons: {\r\n            name: 'Hackathons',\r\n            description: 'Events where cross-disciplined teams collaborate intensively on specific projects ' +\r\n                'or challenges. They often involve timed demonstrations and competition for prizes.',\r\n            color: 'red',\r\n            icon: '/app/images/icons/ic_timer_48px.svg'\r\n        },\r\n        designSprints: {\r\n            name: 'Design Sprints',\r\n            description: 'Intense, focused, collaborative brainstorming events where product design is key. ' +\r\n                'Iterate through the various phases of understanding, sketching, deciding, prototyping, ' +\r\n                'and testing.',\r\n            color: 'pink',\r\n            icon: '/app/images/icons/ic_directions_run_48px.svg'\r\n        }\r\n    };\r\n\r\n    if (Config.activities.techTalks) {\r\n        vm.activities.push(activityList.techTalks);\r\n    }\r\n    if (Config.activities.roundTables) {\r\n        vm.activities.push(activityList.roundTables);\r\n    }\r\n    if (Config.activities.codeLabs) {\r\n        vm.activities.push(activityList.codeLabs);\r\n    }\r\n    if (Config.activities.devFests) {\r\n        vm.activities.push(activityList.devFests);\r\n    }\r\n    if (Config.activities.appClinics) {\r\n        vm.activities.push(activityList.appClinics);\r\n    }\r\n    if (Config.activities.panels) {\r\n        vm.activities.push(activityList.panels);\r\n    }\r\n    if (Config.activities.hackathons) {\r\n        vm.activities.push(activityList.hackathons);\r\n    }\r\n    if (Config.activities.designSprints) {\r\n        vm.activities.push(activityList.designSprints);\r\n    }\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.controller('EventsController', function ($http, $log, $filter, Config, NavService) {\r\n    var vm = this;\r\n    NavService.setNavTab(2);\r\n    vm.chapterName = Config.name;\r\n    vm.loading = true;\r\n    vm.dateFormat = Config.dateFormat;\r\n    vm.events = { past:[], future:[] };\r\n\r\n    var url = 'https://hub.gdgx.io/api/v1/chapters/' + Config.id + '/events/upcoming?callback=JSON_CALLBACK';\r\n    var headers = { 'headers': { 'Accept': 'application/json;' }, 'timeout': 2000 };\r\n    $http.jsonp(url, headers)\r\n        .success(function (data) {\r\n            for (var i = data.items.length - 1; i >= 0; i--) {\r\n                if (data.items[i].about) {\r\n                    data.items[i].about =\r\n                        data.items[i].about.replace(/<br\\s*\\/?><br\\s*\\/?><br\\s*\\/?><br\\s*\\/?>/g, '<br><br>');\r\n                } else {\r\n                    data.items[i].about = '';\r\n                }\r\n                vm.events.future.push(data.items[i]);\r\n            }\r\n            vm.events.future = $filter('orderBy')(vm.events.future, 'start', false);\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        })\r\n        .error(function (response) {\r\n            vm.upcomingError = 'Sorry, we failed to retrieve the upcoming events from the GDG-X Hub API.';\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n            $log.debug('Sorry, we failed to retrieve the upcoming events from the GDG-X Hub API: ' + response);\r\n        });\r\n\r\n    var getPastEventsPage = function(page) {\r\n        var url = 'https://hub.gdgx.io/api/v1/chapters/' + Config.id +\r\n            '/events/past?callback=JSON_CALLBACK&page=' + page;\r\n        var headers = { 'headers': {'Accept': 'application/json;'}, 'timeout': 2000 };\r\n        $http.jsonp(url, headers)\r\n            .success(function (data) {\r\n                var i;\r\n                for (i = data.items.length - 1; i >= 0; i--) {\r\n                    if (data.items[i].about) {\r\n                        data.items[i].about =\r\n                            data.items[i].about.replace(/<br\\s*\\/?><br\\s*\\/?><br\\s*\\/?><br\\s*\\/?>/g, '<br><br>');\r\n                    } else {\r\n                        data.items[i].about = '';\r\n                    }\r\n                    vm.events.past.push(data.items[i]);\r\n                }\r\n                if (data.pages === page) {\r\n                    vm.events.past = $filter('orderBy')(vm.events.past, 'start', true);\r\n                    vm.loading = false;\r\n                    vm.status = 'ready';\r\n                } else {\r\n                    getPastEventsPage(page + 1);\r\n                }\r\n            })\r\n            .error(function (response) {\r\n                vm.pastError = 'Sorry, we failed to retrieve the past events from the GDG-X Hub API.';\r\n                vm.loading = false;\r\n                vm.status = 'ready';\r\n                $log.debug('Sorry, we failed to retrieve the past events from the GDG-X Hub API: ' + response);\r\n            });\r\n    };\r\n    getPastEventsPage(1);\r\n});\r\n\n// Google+ hashtag linky from http://plnkr.co/edit/IEpLfZ8gO2B9mJcTKuWY?p=preview\r\nangular.module('gdgXBoomerang')\r\n.filter('hashLinky', function() {\r\n    var ELEMENT_NODE = 1;\r\n    var TEXT_NODE = 3;\r\n    var linkifiedDOM = document.createElement('div');\r\n    var inputDOM = document.createElement('div');\r\n\r\n    return function(input) {\r\n        inputDOM.innerHTML = input;\r\n        return hashLinky(inputDOM).innerHTML;\r\n    };\r\n\r\n    function hashLinky(startNode) {\r\n        var i, currentNode;\r\n        for (i = 0; i < startNode.childNodes.length; i++) {\r\n            currentNode = startNode.childNodes[i];\r\n\r\n            switch (currentNode.nodeType) {\r\n                case ELEMENT_NODE:\r\n                    hashLinky(currentNode);\r\n                    break;\r\n                case TEXT_NODE:\r\n                    var hashtagRegex = /#([A-Za-z0-9-_]+)/g;\r\n                    currentNode.textContent =  currentNode.textContent.replace(hashtagRegex,\r\n                        '<a href=\"https://plus.google.com/s/%23$1\" target=\"_blank\">#$1</a>');\r\n\r\n                    linkifiedDOM.innerHTML = currentNode.textContent;\r\n                    i += linkifiedDOM.childNodes.length - 1;\r\n\r\n                    while (linkifiedDOM.childNodes.length) {\r\n                        startNode.insertBefore(linkifiedDOM.childNodes[0], currentNode);\r\n                    }\r\n                    startNode.removeChild(currentNode);\r\n            }\r\n        }\r\n        return startNode;\r\n    }\r\n});\r\n\n// HTML-ified linky from http://plnkr.co/edit/IEpLfZ8gO2B9mJcTKuWY?p=preview\r\nangular.module('gdgXBoomerang')\r\n.filter('htmlLinky', function($filter) {\r\n    var ELEMENT_NODE = 1;\r\n    var TEXT_NODE = 3;\r\n    var linkifiedDOM = document.createElement('div');\r\n    var inputDOM = document.createElement('div');\r\n\r\n    return function(input) {\r\n        inputDOM.innerHTML = input;\r\n        return linkify(inputDOM).innerHTML;\r\n    };\r\n\r\n    function linkify(startNode) {\r\n        var i, currentNode;\r\n        for (i = 0; i < startNode.childNodes.length; i++) {\r\n            currentNode = startNode.childNodes[i];\r\n\r\n            switch (currentNode.nodeType) {\r\n                case ELEMENT_NODE:\r\n                    linkify(currentNode);\r\n                    break;\r\n                case TEXT_NODE:\r\n                    linkifiedDOM.innerHTML = $filter('linky')(currentNode.textContent, '_blank');\r\n                    i += linkifiedDOM.childNodes.length - 1;\r\n\r\n                    while (linkifiedDOM.childNodes.length) {\r\n                        startNode.insertBefore(linkifiedDOM.childNodes[0], currentNode);\r\n                    }\r\n\r\n                    startNode.removeChild(currentNode);\r\n            }\r\n        }\r\n        return startNode;\r\n    }\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.controller('NewsController', function ($http, $timeout, $filter, $log, $sce, Config, NavService) {\r\n    var vm = this;\r\n    NavService.setNavTab(1);\r\n    vm.loading = true;\r\n    vm.chapterName = Config.name;\r\n\r\n    $http.jsonp('https://www.googleapis.com/plus/v1/people/' + Config.id +\r\n        '/activities/public?callback=JSON_CALLBACK&maxResults=20&key=' + Config.googleApi)\r\n        .success(function (response) {\r\n            var entries = [], i;\r\n            var item, actor, object, itemTitle, html;\r\n            var published, actorImage, entry;\r\n\r\n            if (!response.items) {\r\n                handleError('Response from server contained no news items.');\r\n                return;\r\n            }\r\n\r\n            for (i = 0; i < response.items.length; i++) {\r\n                item = response.items[i];\r\n                actor = item.actor || {};\r\n                object = item.object || {};\r\n                itemTitle = object.content;\r\n                published = $filter('date')(new Date(item.published), 'fullDate');\r\n                html = [];\r\n\r\n                html.push(itemTitle.replace(new RegExp('\\n', 'g'), '<br />').replace('<br><br>', '<br />'));\r\n                html = html.join('');\r\n                html = $sce.trustAsHtml(html);\r\n\r\n                actorImage = actor.image.url;\r\n                actorImage = actorImage.substr(0, actorImage.length - 2) + '16';\r\n\r\n                entry = {\r\n                    via: {\r\n                        name: 'Google+',\r\n                        url: item.url\r\n                    },\r\n                    published: published,\r\n                    body: html,\r\n                    date: item.updated,\r\n                    reshares: (object.resharers || {}).totalItems,\r\n                    plusones: (object.plusoners || {}).totalItems,\r\n                    comments: (object.replies || {}).totalItems,\r\n                    icon: actorImage,\r\n                    item: item,\r\n                    object: object\r\n                };\r\n\r\n                entries.push(entry);\r\n            }\r\n            vm.news = $filter('orderBy')(entries, 'date', true);\r\n            $timeout(function () {\r\n                gapi.plusone.go();\r\n            });\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        })\r\n        .error(handleError);\r\n\r\n    function handleError(error) {\r\n        vm.desc = 'Sorry, we failed to retrieve the news from the Google+ API.';\r\n        vm.loading = false;\r\n        vm.status = 'ready';\r\n        $log.debug('Sorry, we failed to retrieve the news from the Google+ API: ' + error);\r\n    }\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.controller('PhotosController', function ($http, Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = true;\r\n    NavService.setNavTab(5);\r\n    vm.chapterName = Config.name;\r\n    vm.photos = [];\r\n\r\n    var pwa = 'https://picasaweb.google.com/data/feed/api/user/' + Config.id + '/albumid/' + Config.pwaId +\r\n        '?access=public&alt=json-in-script&kind=photo&max-results=50&' +\r\n        'fields=entry(title,link/@href,summary,content/@src)&v=2.0&callback=JSON_CALLBACK';\r\n\r\n    $http.jsonp(pwa).\r\n        success(function (data) {\r\n            var photoList = data.feed.entry;\r\n            var i;\r\n            if (photoList) {\r\n                // Use reverse ordering newest first\r\n                for (i = photoList.length - 1; i >= 0; i--) {\r\n                    var photo = {\r\n                        link: photoList[i].link[2].href,\r\n                        src: photoList[i].content.src,\r\n                        alt: photoList[i].title.$t,\r\n                        title: photoList[i].summary.$t\r\n                    };\r\n                    vm.photos.push(photo);\r\n                }\r\n            }\r\n            vm.loading = false;\r\n        })\r\n        .error(function () {\r\n            vm.errorMsg = 'Sorry, we failed to retrieve the Photos from the Picasa Web Albums API. ' +\r\n                'Logging out of your Google Account and logging back in may resolve this issue.';\r\n            vm.loading = false;\r\n        });\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.controller('OrganizersController', function ($http, Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = false;\r\n    NavService.setNavTab(4);\r\n\r\n    var url = 'https://hub.gdgx.io/api/v1/chapters/' + Config.id + '?callback=JSON_CALLBACK';\r\n    var headers = { 'headers': { 'Accept': 'application/json;' }, 'timeout': 2000 };\r\n    $http.jsonp(url, headers).success(function (data) {\r\n        if (data.organizers) {\r\n            vm.organizers = data.organizers;\r\n        }\r\n    });\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusAlbum', function () {\r\n    return {\r\n        scope: {\r\n            article: '=',\r\n            attachment: '='\r\n        },\r\n        templateUrl: '/app/news/components/gplusAlbum.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusArticle', function () {\r\n    return {\r\n        scope: {\r\n            article: '=',\r\n            attachment: '='\r\n        },\r\n        templateUrl: '/app/news/components/gplusArticle.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusEvent', function () {\r\n    return {\r\n        scope: { article: '=' },\r\n        templateUrl: '/app/news/components/gplusEvent.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusNoAttachments', function () {\r\n    return {\r\n        scope: { article: '=' },\r\n        templateUrl: '/app/news/components/gplusNoAttachments.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPhotoVideo', function () {\r\n    return {\r\n        scope: {\r\n            article: '=',\r\n            attachment: '='\r\n        },\r\n        templateUrl: '/app/news/components/gplusPhotoVideo.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPostContent', function () {\r\n    return {\r\n        transclude: true,\r\n        templateUrl: '/app/news/components/gplusPostContent.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPostImage', function () {\r\n    return {\r\n        templateUrl: '/app/news/components/gplusPostImage.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPostVideo', function ($sce) {\r\n    return {\r\n        link: function (scope, element) {\r\n            scope.videoUrl = $sce.trustAsResourceUrl(scope.attachment.embed.url);\r\n            scope.getDynamicHeight = function () {\r\n                return (element.prop('clientWidth') * 0.6) + 'px';\r\n            };\r\n        },\r\n        templateUrl: '/app/news/components/gplusPostVideo.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('newsItemFooter', function () {\r\n    return {\r\n        templateUrl: '/app/news/components/newsItemFooter.html'\r\n    };\r\n});\r\n\n'use strict';\r\n\r\nangular.module('gdgXBoomerang')\r\n.directive('gplusPerson', function ($http, $filter, Config) {\r\n    return {\r\n        restrict: 'EA',\r\n        templateUrl: 'app/organizers/components/gplus_person.html',\r\n        scope: {\r\n            gplusId: '='\r\n        },\r\n        link: function (scope) {\r\n            scope.$watch('gplusId', function (oldVal, newVal) {\r\n                if (newVal) {\r\n                    $http.jsonp('https://www.googleapis.com/plus/v1/people/' + newVal +\r\n                        '?callback=JSON_CALLBACK&fields=aboutMe%2CdisplayName%2Cimage&key=' + Config.googleApi)\r\n                        .success(function (data) {\r\n                            if (data && data.image && data.image.url) {\r\n                                data.image.url = data.image.url.replace('sz=50', 'sz=170');\r\n                            }\r\n                            scope.person = data;\r\n                        });\r\n                }\r\n            });\r\n        }\r\n    };\r\n});\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nangular.module('gdgXBoomerang', ['ngRoute', 'ngSanitize', 'ngAria', 'ngAnimate', 'ngMaterial'])\r\n.controller('MainController', [\"$rootScope\", \"Config\", \"NavService\", function ($rootScope, Config, NavService) {\r\n    var mc = this;\r\n    mc.chapterName = Config.name;\r\n    mc.googlePlusLink = 'https://plus.google.com/' + Config.id;\r\n    mc.gdgLink = 'https://developers.google.com/groups/chapter/' + Config.id + '/';\r\n    mc.twitterLink = Config.twitter ? 'https://twitter.com/' + Config.twitter : null;\r\n    mc.facebookLink = Config.facebook ? 'https://www.facebook.com/' + Config.facebook : null;\r\n    mc.meetupLink = Config.meetup ? 'http://www.meetup.com/' + Config.meetup : null;\r\n    $rootScope.canonical = Config.domain;\r\n\r\n    NavService.registerNavListener(function (tab) {\r\n        mc.navTab = tab;\r\n    });\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.config([\"$routeProvider\", \"$locationProvider\", \"$mdThemingProvider\", function ($routeProvider, $locationProvider, $mdThemingProvider) {\r\n\r\n    $locationProvider.hashPrefix('!');\r\n\r\n    $routeProvider.\r\n        when('/about', {templateUrl: 'app/about/about.html', controller: 'AboutController', controllerAs: 'vm'}).\r\n        when('/news', {templateUrl: 'app/news/news.html', controller: 'NewsController', controllerAs: 'vm'}).\r\n        when('/events', {templateUrl: 'app/events/events.html', controller: 'EventsController', controllerAs: 'vm'}).\r\n        when('/photos', {templateUrl: 'app/photos/photos.html', controller: 'PhotosController', controllerAs: 'vm'}).\r\n        when('/activities', {templateUrl: 'app/activities/activities.html',\r\n            controller: 'ActivitiesController', controllerAs: 'vm'}).\r\n        when('/organizers', {templateUrl: 'app/organizers/organizers.html',\r\n            controller: 'OrganizersController', controllerAs: 'vm'}).\r\n        otherwise({ redirectTo: '/about' });\r\n\r\n    $mdThemingProvider.theme('default')\r\n        .primaryPalette('blue')\r\n        .accentPalette('green', {\r\n            'default': 'A700'\r\n        });\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.factory('Config', function () {\r\n    return {\r\n        // TODO Modify these to configure your app\r\n        'name'          : 'GDG Missoula',\r\n        'id'            : '111439872924209508980',\r\n        'googleApi'     : 'AIzaSyAvtGTIX0uWwObbrvcWvm1tgr6Fl-f7WaM',\r\n        'pwaId'         : '6153662499822550481', // Picasa Web Album id, must belong to Google+ id above\r\n        'domain'        : 'http://gdg-missoula.github.io',\r\n        'twitter'       : '',\r\n        'facebook'      : '',\r\n        'meetup'        : 'Montana-Programmers',\r\n        // Change to 'EEEE, MMMM d, y - H:mm' for 24 hour time format.\r\n        'dateFormat'    : 'EEEE, MMMM d, y - h:mm a',\r\n        'cover' : {\r\n            title: 'Worldwide GDG Events',\r\n            subtitle: 'Directory of developer events organized by tags and displayed on a global map.',\r\n            button: {\r\n                text: 'Find local events',\r\n                url: 'http://gdg.events/'\r\n            }\r\n        },\r\n        'activities': {\r\n            techTalks: true,\r\n            codeLabs: true,\r\n            hackathons: false,\r\n            devFests: true,\r\n            appClinics: false,\r\n            panels: false,\r\n            designSprints: false,\r\n            roundTables: false\r\n        }\r\n        // To update the snippet which is used for sharing, see the TODO in the index.html.\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.factory('NavService', function () {\r\n    var navTab = '0';\r\n    var navListener;\r\n\r\n    return {\r\n        setNavTab: setNavTab,\r\n        getNavTab: getNavTab,\r\n        registerNavListener: registerNavListener\r\n    };\r\n\r\n    function setNavTab(tabValue) {\r\n        navTab = tabValue;\r\n        if (navListener) {\r\n            navListener(navTab);\r\n        }\r\n    }\r\n\r\n    function getNavTab() {\r\n        return navTab;\r\n    }\r\n\r\n    function registerNavListener(listenerToRegister) {\r\n        navListener = listenerToRegister;\r\n    }\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.controller('AboutController', [\"$http\", \"$sce\", \"Config\", \"NavService\", function ($http, $sce, Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = true;\r\n    NavService.setNavTab(0);\r\n    vm.cover = Config.cover;\r\n\r\n    $http.jsonp('https://www.googleapis.com/plus/v1/people/' + Config.id +\r\n            '?callback=JSON_CALLBACK&fields=aboutMe%2Ccover%2Cimage%2CplusOneCount&key=' + Config.googleApi).\r\n        success(function (data) {\r\n            vm.desc = data.aboutMe;\r\n            $sce.trustAsHtml(vm.desc);\r\n\r\n            if (data.cover && data.cover.coverPhoto.url) {\r\n                vm.cover.url = data.cover.coverPhoto.url;\r\n            }\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        })\r\n        .error(function (error) {\r\n            vm.desc = 'Sorry, we failed to retrieve the About text from the Google+ API.';\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        });\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.controller('ActivitiesController', [\"Config\", \"NavService\", function (Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = false;\r\n    NavService.setNavTab(3);\r\n    vm.activities = [];\r\n\r\n    var activityList = {\r\n        techTalks: {\r\n            name: 'Tech Talks',\r\n            description: 'These talks are a grassroots-style series of presentation given by various ' +\r\n                'technical experts spanning a wide spectrum of topics in technology and related areas.',\r\n            color: 'purple',\r\n            icon: '/app/images/icons/ic_mic_48px.svg'\r\n        },\r\n        roundTables: {\r\n            name: 'Round Tables',\r\n            description: 'Free-form, community-focused events where all attendees can raise topics for discussion.',\r\n            color: 'darkBlue',\r\n            icon: '/app/images/icons/ic_local_pizza_48px.svg'\r\n        },\r\n        codeLabs: {\r\n            name: 'Code Labs',\r\n            description: 'Specially prepared to provide step-by-step instructions, these events focus on ' +\r\n                'introducing new technology and maximizing hands-on learning.',\r\n            color: 'green',\r\n            icon: '/app/images/icons/ic_code_48px.svg'\r\n        },\r\n        devFests: {\r\n            name: 'Dev Fests',\r\n            description: 'GDG Dev Fests are large scale, community-run events that offer speaker sessions ' +\r\n                'across single or multiple product areas, hackathons, code labs, and more...',\r\n            color: 'deepBlue',\r\n            icon: '/app/images/icons/ic_event_48px.svg'\r\n        },\r\n        appClinics: {\r\n            name: 'App Clinics',\r\n            description: 'These community events bring together developers, designers, testers, and ' +\r\n                'usability experts to evaluate specific apps with a focus on constructive criticism, ' +\r\n                'problem solving, and collaboration.',\r\n            color: 'yellow',\r\n            icon: '/app/images/icons/ic_local_hospital_48px.svg'\r\n        },\r\n        panels: {\r\n            name: 'Panels',\r\n            description: 'These events bring together multiple experts on a topic. The formats can vary from ' +\r\n                'moderator-led Q&A, debate, focused or free-form discussion, to audience Q&A.',\r\n            color: 'lightPurple',\r\n            icon: '/app/images/icons/ic_people_48px.svg'\r\n        },\r\n        hackathons: {\r\n            name: 'Hackathons',\r\n            description: 'Events where cross-disciplined teams collaborate intensively on specific projects ' +\r\n                'or challenges. They often involve timed demonstrations and competition for prizes.',\r\n            color: 'red',\r\n            icon: '/app/images/icons/ic_timer_48px.svg'\r\n        },\r\n        designSprints: {\r\n            name: 'Design Sprints',\r\n            description: 'Intense, focused, collaborative brainstorming events where product design is key. ' +\r\n                'Iterate through the various phases of understanding, sketching, deciding, prototyping, ' +\r\n                'and testing.',\r\n            color: 'pink',\r\n            icon: '/app/images/icons/ic_directions_run_48px.svg'\r\n        }\r\n    };\r\n\r\n    if (Config.activities.techTalks) {\r\n        vm.activities.push(activityList.techTalks);\r\n    }\r\n    if (Config.activities.roundTables) {\r\n        vm.activities.push(activityList.roundTables);\r\n    }\r\n    if (Config.activities.codeLabs) {\r\n        vm.activities.push(activityList.codeLabs);\r\n    }\r\n    if (Config.activities.devFests) {\r\n        vm.activities.push(activityList.devFests);\r\n    }\r\n    if (Config.activities.appClinics) {\r\n        vm.activities.push(activityList.appClinics);\r\n    }\r\n    if (Config.activities.panels) {\r\n        vm.activities.push(activityList.panels);\r\n    }\r\n    if (Config.activities.hackathons) {\r\n        vm.activities.push(activityList.hackathons);\r\n    }\r\n    if (Config.activities.designSprints) {\r\n        vm.activities.push(activityList.designSprints);\r\n    }\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.controller('EventsController', [\"$http\", \"$log\", \"$filter\", \"Config\", \"NavService\", function ($http, $log, $filter, Config, NavService) {\r\n    var vm = this;\r\n    NavService.setNavTab(2);\r\n    vm.chapterName = Config.name;\r\n    vm.loading = true;\r\n    vm.dateFormat = Config.dateFormat;\r\n    vm.events = { past:[], future:[] };\r\n\r\n    var url = 'https://hub.gdgx.io/api/v1/chapters/' + Config.id + '/events/upcoming?callback=JSON_CALLBACK';\r\n    var headers = { 'headers': { 'Accept': 'application/json;' }, 'timeout': 2000 };\r\n    $http.jsonp(url, headers)\r\n        .success(function (data) {\r\n            for (var i = data.items.length - 1; i >= 0; i--) {\r\n                if (data.items[i].about) {\r\n                    data.items[i].about =\r\n                        data.items[i].about.replace(/<br\\s*\\/?><br\\s*\\/?><br\\s*\\/?><br\\s*\\/?>/g, '<br><br>');\r\n                } else {\r\n                    data.items[i].about = '';\r\n                }\r\n                vm.events.future.push(data.items[i]);\r\n            }\r\n            vm.events.future = $filter('orderBy')(vm.events.future, 'start', false);\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        })\r\n        .error(function (response) {\r\n            vm.upcomingError = 'Sorry, we failed to retrieve the upcoming events from the GDG-X Hub API.';\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n            $log.debug('Sorry, we failed to retrieve the upcoming events from the GDG-X Hub API: ' + response);\r\n        });\r\n\r\n    var getPastEventsPage = function(page) {\r\n        var url = 'https://hub.gdgx.io/api/v1/chapters/' + Config.id +\r\n            '/events/past?callback=JSON_CALLBACK&page=' + page;\r\n        var headers = { 'headers': {'Accept': 'application/json;'}, 'timeout': 2000 };\r\n        $http.jsonp(url, headers)\r\n            .success(function (data) {\r\n                var i;\r\n                for (i = data.items.length - 1; i >= 0; i--) {\r\n                    if (data.items[i].about) {\r\n                        data.items[i].about =\r\n                            data.items[i].about.replace(/<br\\s*\\/?><br\\s*\\/?><br\\s*\\/?><br\\s*\\/?>/g, '<br><br>');\r\n                    } else {\r\n                        data.items[i].about = '';\r\n                    }\r\n                    vm.events.past.push(data.items[i]);\r\n                }\r\n                if (data.pages === page) {\r\n                    vm.events.past = $filter('orderBy')(vm.events.past, 'start', true);\r\n                    vm.loading = false;\r\n                    vm.status = 'ready';\r\n                } else {\r\n                    getPastEventsPage(page + 1);\r\n                }\r\n            })\r\n            .error(function (response) {\r\n                vm.pastError = 'Sorry, we failed to retrieve the past events from the GDG-X Hub API.';\r\n                vm.loading = false;\r\n                vm.status = 'ready';\r\n                $log.debug('Sorry, we failed to retrieve the past events from the GDG-X Hub API: ' + response);\r\n            });\r\n    };\r\n    getPastEventsPage(1);\r\n}]);\r\n\n// Google+ hashtag linky from http://plnkr.co/edit/IEpLfZ8gO2B9mJcTKuWY?p=preview\r\nangular.module('gdgXBoomerang')\r\n.filter('hashLinky', function() {\r\n    var ELEMENT_NODE = 1;\r\n    var TEXT_NODE = 3;\r\n    var linkifiedDOM = document.createElement('div');\r\n    var inputDOM = document.createElement('div');\r\n\r\n    return function(input) {\r\n        inputDOM.innerHTML = input;\r\n        return hashLinky(inputDOM).innerHTML;\r\n    };\r\n\r\n    function hashLinky(startNode) {\r\n        var i, currentNode;\r\n        for (i = 0; i < startNode.childNodes.length; i++) {\r\n            currentNode = startNode.childNodes[i];\r\n\r\n            switch (currentNode.nodeType) {\r\n                case ELEMENT_NODE:\r\n                    hashLinky(currentNode);\r\n                    break;\r\n                case TEXT_NODE:\r\n                    var hashtagRegex = /#([A-Za-z0-9-_]+)/g;\r\n                    currentNode.textContent =  currentNode.textContent.replace(hashtagRegex,\r\n                        '<a href=\"https://plus.google.com/s/%23$1\" target=\"_blank\">#$1</a>');\r\n\r\n                    linkifiedDOM.innerHTML = currentNode.textContent;\r\n                    i += linkifiedDOM.childNodes.length - 1;\r\n\r\n                    while (linkifiedDOM.childNodes.length) {\r\n                        startNode.insertBefore(linkifiedDOM.childNodes[0], currentNode);\r\n                    }\r\n                    startNode.removeChild(currentNode);\r\n            }\r\n        }\r\n        return startNode;\r\n    }\r\n});\r\n\n// HTML-ified linky from http://plnkr.co/edit/IEpLfZ8gO2B9mJcTKuWY?p=preview\r\nangular.module('gdgXBoomerang')\r\n.filter('htmlLinky', [\"$filter\", function($filter) {\r\n    var ELEMENT_NODE = 1;\r\n    var TEXT_NODE = 3;\r\n    var linkifiedDOM = document.createElement('div');\r\n    var inputDOM = document.createElement('div');\r\n\r\n    return function(input) {\r\n        inputDOM.innerHTML = input;\r\n        return linkify(inputDOM).innerHTML;\r\n    };\r\n\r\n    function linkify(startNode) {\r\n        var i, currentNode;\r\n        for (i = 0; i < startNode.childNodes.length; i++) {\r\n            currentNode = startNode.childNodes[i];\r\n\r\n            switch (currentNode.nodeType) {\r\n                case ELEMENT_NODE:\r\n                    linkify(currentNode);\r\n                    break;\r\n                case TEXT_NODE:\r\n                    linkifiedDOM.innerHTML = $filter('linky')(currentNode.textContent, '_blank');\r\n                    i += linkifiedDOM.childNodes.length - 1;\r\n\r\n                    while (linkifiedDOM.childNodes.length) {\r\n                        startNode.insertBefore(linkifiedDOM.childNodes[0], currentNode);\r\n                    }\r\n\r\n                    startNode.removeChild(currentNode);\r\n            }\r\n        }\r\n        return startNode;\r\n    }\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.controller('NewsController', [\"$http\", \"$timeout\", \"$filter\", \"$log\", \"$sce\", \"Config\", \"NavService\", function ($http, $timeout, $filter, $log, $sce, Config, NavService) {\r\n    var vm = this;\r\n    NavService.setNavTab(1);\r\n    vm.loading = true;\r\n    vm.chapterName = Config.name;\r\n\r\n    $http.jsonp('https://www.googleapis.com/plus/v1/people/' + Config.id +\r\n        '/activities/public?callback=JSON_CALLBACK&maxResults=20&key=' + Config.googleApi)\r\n        .success(function (response) {\r\n            var entries = [], i;\r\n            var item, actor, object, itemTitle, html;\r\n            var published, actorImage, entry;\r\n\r\n            if (!response.items) {\r\n                handleError('Response from server contained no news items.');\r\n                return;\r\n            }\r\n\r\n            for (i = 0; i < response.items.length; i++) {\r\n                item = response.items[i];\r\n                actor = item.actor || {};\r\n                object = item.object || {};\r\n                itemTitle = object.content;\r\n                published = $filter('date')(new Date(item.published), 'fullDate');\r\n                html = [];\r\n\r\n                html.push(itemTitle.replace(new RegExp('\\n', 'g'), '<br />').replace('<br><br>', '<br />'));\r\n                html = html.join('');\r\n                html = $sce.trustAsHtml(html);\r\n\r\n                actorImage = actor.image.url;\r\n                actorImage = actorImage.substr(0, actorImage.length - 2) + '16';\r\n\r\n                entry = {\r\n                    via: {\r\n                        name: 'Google+',\r\n                        url: item.url\r\n                    },\r\n                    published: published,\r\n                    body: html,\r\n                    date: item.updated,\r\n                    reshares: (object.resharers || {}).totalItems,\r\n                    plusones: (object.plusoners || {}).totalItems,\r\n                    comments: (object.replies || {}).totalItems,\r\n                    icon: actorImage,\r\n                    item: item,\r\n                    object: object\r\n                };\r\n\r\n                entries.push(entry);\r\n            }\r\n            vm.news = $filter('orderBy')(entries, 'date', true);\r\n            $timeout(function () {\r\n                gapi.plusone.go();\r\n            });\r\n            vm.loading = false;\r\n            vm.status = 'ready';\r\n        })\r\n        .error(handleError);\r\n\r\n    function handleError(error) {\r\n        vm.desc = 'Sorry, we failed to retrieve the news from the Google+ API.';\r\n        vm.loading = false;\r\n        vm.status = 'ready';\r\n        $log.debug('Sorry, we failed to retrieve the news from the Google+ API: ' + error);\r\n    }\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.controller('PhotosController', [\"$http\", \"Config\", \"NavService\", function ($http, Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = true;\r\n    NavService.setNavTab(5);\r\n    vm.chapterName = Config.name;\r\n    vm.photos = [];\r\n\r\n    var pwa = 'https://picasaweb.google.com/data/feed/api/user/' + Config.id + '/albumid/' + Config.pwaId +\r\n        '?access=public&alt=json-in-script&kind=photo&max-results=50&' +\r\n        'fields=entry(title,link/@href,summary,content/@src)&v=2.0&callback=JSON_CALLBACK';\r\n\r\n    $http.jsonp(pwa).\r\n        success(function (data) {\r\n            var photoList = data.feed.entry;\r\n            var i;\r\n            if (photoList) {\r\n                // Use reverse ordering newest first\r\n                for (i = photoList.length - 1; i >= 0; i--) {\r\n                    var photo = {\r\n                        link: photoList[i].link[2].href,\r\n                        src: photoList[i].content.src,\r\n                        alt: photoList[i].title.$t,\r\n                        title: photoList[i].summary.$t\r\n                    };\r\n                    vm.photos.push(photo);\r\n                }\r\n            }\r\n            vm.loading = false;\r\n        })\r\n        .error(function () {\r\n            vm.errorMsg = 'Sorry, we failed to retrieve the Photos from the Picasa Web Albums API. ' +\r\n                'Logging out of your Google Account and logging back in may resolve this issue.';\r\n            vm.loading = false;\r\n        });\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.controller('OrganizersController', [\"$http\", \"Config\", \"NavService\", function ($http, Config, NavService) {\r\n    var vm = this;\r\n    vm.loading = false;\r\n    NavService.setNavTab(4);\r\n\r\n    var url = 'https://hub.gdgx.io/api/v1/chapters/' + Config.id + '?callback=JSON_CALLBACK';\r\n    var headers = { 'headers': { 'Accept': 'application/json;' }, 'timeout': 2000 };\r\n    $http.jsonp(url, headers).success(function (data) {\r\n        if (data.organizers) {\r\n            vm.organizers = data.organizers;\r\n        }\r\n    });\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusAlbum', function () {\r\n    return {\r\n        scope: {\r\n            article: '=',\r\n            attachment: '='\r\n        },\r\n        templateUrl: '/app/news/components/gplusAlbum.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusArticle', function () {\r\n    return {\r\n        scope: {\r\n            article: '=',\r\n            attachment: '='\r\n        },\r\n        templateUrl: '/app/news/components/gplusArticle.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusEvent', function () {\r\n    return {\r\n        scope: { article: '=' },\r\n        templateUrl: '/app/news/components/gplusEvent.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusNoAttachments', function () {\r\n    return {\r\n        scope: { article: '=' },\r\n        templateUrl: '/app/news/components/gplusNoAttachments.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPhotoVideo', function () {\r\n    return {\r\n        scope: {\r\n            article: '=',\r\n            attachment: '='\r\n        },\r\n        templateUrl: '/app/news/components/gplusPhotoVideo.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPostContent', function () {\r\n    return {\r\n        transclude: true,\r\n        templateUrl: '/app/news/components/gplusPostContent.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPostImage', function () {\r\n    return {\r\n        templateUrl: '/app/news/components/gplusPostImage.html'\r\n    };\r\n});\r\n\nangular.module('gdgXBoomerang')\r\n.directive('gplusPostVideo', [\"$sce\", function ($sce) {\r\n    return {\r\n        link: function (scope, element) {\r\n            scope.videoUrl = $sce.trustAsResourceUrl(scope.attachment.embed.url);\r\n            scope.getDynamicHeight = function () {\r\n                return (element.prop('clientWidth') * 0.6) + 'px';\r\n            };\r\n        },\r\n        templateUrl: '/app/news/components/gplusPostVideo.html'\r\n    };\r\n}]);\r\n\nangular.module('gdgXBoomerang')\r\n.directive('newsItemFooter', function () {\r\n    return {\r\n        templateUrl: '/app/news/components/newsItemFooter.html'\r\n    };\r\n});\r\n\n'use strict';\r\n\r\nangular.module('gdgXBoomerang')\r\n.directive('gplusPerson', [\"$http\", \"$filter\", \"Config\", function ($http, $filter, Config) {\r\n    return {\r\n        restrict: 'EA',\r\n        templateUrl: 'app/organizers/components/gplus_person.html',\r\n        scope: {\r\n            gplusId: '='\r\n        },\r\n        link: function (scope) {\r\n            scope.$watch('gplusId', function (oldVal, newVal) {\r\n                if (newVal) {\r\n                    $http.jsonp('https://www.googleapis.com/plus/v1/people/' + newVal +\r\n                        '?callback=JSON_CALLBACK&fields=aboutMe%2CdisplayName%2Cimage&key=' + Config.googleApi)\r\n                        .success(function (data) {\r\n                            if (data && data.image && data.image.url) {\r\n                                data.image.url = data.image.url.replace('sz=50', 'sz=170');\r\n                            }\r\n                            scope.person = data;\r\n                        });\r\n                }\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\n},{}]},{},[1])\n\n"],"sourceRoot":"/source/"}